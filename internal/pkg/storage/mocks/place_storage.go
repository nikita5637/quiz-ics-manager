// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mysql "github.com/nikita5637/quiz-ics-manager-api/internal/pkg/storage/mysql"
	mock "github.com/stretchr/testify/mock"
)

// PlaceStorage is an autogenerated mock type for the PlaceStorage type
type PlaceStorage struct {
	mock.Mock
}

type PlaceStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *PlaceStorage) EXPECT() *PlaceStorage_Expecter {
	return &PlaceStorage_Expecter{mock: &_m.Mock}
}

// GetPlaceByExternalPlaceID provides a mock function with given fields: ctx, externalPlaceID
func (_m *PlaceStorage) GetPlaceByExternalPlaceID(ctx context.Context, externalPlaceID int) (*mysql.Place, error) {
	ret := _m.Called(ctx, externalPlaceID)

	var r0 *mysql.Place
	if rf, ok := ret.Get(0).(func(context.Context, int) *mysql.Place); ok {
		r0 = rf(ctx, externalPlaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mysql.Place)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, externalPlaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceStorage_GetPlaceByExternalPlaceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlaceByExternalPlaceID'
type PlaceStorage_GetPlaceByExternalPlaceID_Call struct {
	*mock.Call
}

// GetPlaceByExternalPlaceID is a helper method to define mock.On call
//  - ctx context.Context
//  - externalPlaceID int
func (_e *PlaceStorage_Expecter) GetPlaceByExternalPlaceID(ctx interface{}, externalPlaceID interface{}) *PlaceStorage_GetPlaceByExternalPlaceID_Call {
	return &PlaceStorage_GetPlaceByExternalPlaceID_Call{Call: _e.mock.On("GetPlaceByExternalPlaceID", ctx, externalPlaceID)}
}

func (_c *PlaceStorage_GetPlaceByExternalPlaceID_Call) Run(run func(ctx context.Context, externalPlaceID int)) *PlaceStorage_GetPlaceByExternalPlaceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *PlaceStorage_GetPlaceByExternalPlaceID_Call) Return(_a0 *mysql.Place, _a1 error) *PlaceStorage_GetPlaceByExternalPlaceID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewPlaceStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlaceStorage creates a new instance of PlaceStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlaceStorage(t mockConstructorTestingTNewPlaceStorage) *PlaceStorage {
	mock := &PlaceStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
