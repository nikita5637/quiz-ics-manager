package mysql

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"github.com/go-xorm/builder"
	"github.com/nikita5637/quiz-ics-manager-api/internal/pkg/logger"

	"github.com/nikita5637/quiz-ics-manager-api/internal/pkg/tx"
)

// Place represents a row from 'place'.
type Place struct {
	ID              int    `json:"id"`                // id
	ExternalPlaceID int    `json:"external_place_id"` // external_place_id
	AppleAddress    string `json:"apple_address"`     // apple_address
}

// PlaceStorage is Place service implementation
type PlaceStorage struct {
	db *tx.Manager
}

// NewPlaceStorage creates new instance of PlaceStorage
func NewPlaceStorage(txManager *tx.Manager) *PlaceStorage {
	return &PlaceStorage{
		db: txManager,
	}
}

// GetAll returns all records
func (s *PlaceStorage) GetAll(ctx context.Context) ([]Place, error) {
	return s.Find(ctx, nil, "")
}

// Find perform find request by params
func (s *PlaceStorage) Find(ctx context.Context, q builder.Cond, sort string) ([]Place, error) {
	query := `SELECT id, external_place_id, apple_address FROM place`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []Place

	for rows.Next() {
		var item Place
		if err := rows.Scan(
			&item.ID,
			&item.ExternalPlaceID,
			&item.AppleAddress,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// FindWithLimit perform find request by params, offset and limit
func (s *PlaceStorage) FindWithLimit(ctx context.Context, q builder.Cond, sort string, offset, limit uint64) ([]Place, error) {
	query := `SELECT id, external_place_id, apple_address FROM place`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return nil, err
		}
		query += ` WHERE ` + where
	}

	if sort != "" {
		query += ` ` + getOrderStmt(sort)
	}

	if limit != 0 {
		query += ` OFFSET ? LIMIT ?`
		args = append(args, offset)
		args = append(args, limit)
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var items []Place

	for rows.Next() {
		var item Place
		if err := rows.Scan(
			&item.ID,
			&item.ExternalPlaceID,
			&item.AppleAddress,
		); err != nil {
			return nil, err
		}

		items = append(items, item)
	}

	return items, nil
}

// Total return count(*) by params
func (s *PlaceStorage) Total(ctx context.Context, q builder.Cond) (uint64, error) {
	query := `SELECT count(*) FROM place`

	var args []interface{}

	if q != nil {
		var where string
		var err error
		where, args, err = builder.ToSQL(q)
		if err != nil {
			return 0, err
		}
		query += ` WHERE ` + where
	}

	rows, err := s.db.Sync(ctx).QueryContext(ctx, query, args...)
	if err != nil {
		return 0, err
	}
	defer rows.Close()

	var count uint64

	for rows.Next() {
		if err := rows.Scan(
			&count,
		); err != nil {
			return 0, err
		}
	}

	return count, nil
}

// Insert inserts the Place to the database.
func (s *PlaceStorage) Insert(ctx context.Context, item Place) (int, error) {
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO place (` +
		`external_place_id, apple_address` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logger.Debugf(ctx, sqlstr, item.ExternalPlaceID, item.AppleAddress)

	res, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.ExternalPlaceID, item.AppleAddress)
	if err != nil {
		return 0, err
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return 0, err
	}

	return int(id), nil
}

// Update updates a Place in the database.
func (s *PlaceStorage) Update(ctx context.Context, item Place) error {
	// update with primary key
	const sqlstr = `UPDATE place SET ` +
		`external_place_id = ?, apple_address = ? ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, item.ExternalPlaceID, item.AppleAddress, item.ID)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.ExternalPlaceID, item.AppleAddress, item.ID); err != nil {
		return err
	}

	return nil
}

// Upsert performs an upsert for Place.
func (s *PlaceStorage) Upsert(ctx context.Context, item Place) error {
	// upsert
	const sqlstr = `INSERT INTO place (` +
		`id, external_place_id, apple_address` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`external_place_id = VALUES(external_place_id), apple_address = VALUES(apple_address)`
	// run
	logger.Debugf(ctx, sqlstr, item.ID, item.ExternalPlaceID, item.AppleAddress)
	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, item.ID, item.ExternalPlaceID, item.AppleAddress); err != nil {
		return err
	}

	return nil
}

// Delete deletes the Place from the database.
func (s *PlaceStorage) Delete(ctx context.Context, id int) error {
	// delete with single primary key
	const sqlstr = `DELETE FROM place ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)

	if _, err := s.db.Master(ctx).ExecContext(ctx, sqlstr, id); err != nil {
		return err
	}

	return nil
}

// GetPlaceByAppleAddress retrieves a row from 'place' as a Place.
//
// Generated from index 'apple_address'.
func (s *PlaceStorage) GetPlaceByAppleAddress(ctx context.Context, appleAddress string) ([]*Place, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, external_place_id, apple_address ` +
		`FROM place ` +
		`WHERE apple_address = ?`
	// run
	logger.Debugf(ctx, sqlstr, appleAddress)
	rows, err := s.db.Sync(ctx).QueryContext(ctx, sqlstr, appleAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	// process
	var res []*Place
	for rows.Next() {
		p := Place{}
		// scan
		if err := rows.Scan(&p.ID, &p.ExternalPlaceID, &p.AppleAddress); err != nil {
			return nil, err
		}
		res = append(res, &p)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return res, nil
}

// GetPlaceByExternalPlaceID retrieves a row from 'place' as a Place.
//
// Generated from index 'external_place_id'.
func (s *PlaceStorage) GetPlaceByExternalPlaceID(ctx context.Context, externalPlaceID int) (*Place, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, external_place_id, apple_address ` +
		`FROM place ` +
		`WHERE external_place_id = ?`
	// run
	logger.Debugf(ctx, sqlstr, externalPlaceID)
	p := Place{}
	if err := s.db.Sync(ctx).QueryRowContext(ctx, sqlstr, externalPlaceID).Scan(&p.ID, &p.ExternalPlaceID, &p.AppleAddress); err != nil {
		return nil, err
	}
	return &p, nil
}

// GetPlaceByID retrieves a row from 'place' as a Place.
//
// Generated from index 'place_id_pkey'.
func (s *PlaceStorage) GetPlaceByID(ctx context.Context, id int) (*Place, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, external_place_id, apple_address ` +
		`FROM place ` +
		`WHERE id = ?`
	// run
	logger.Debugf(ctx, sqlstr, id)
	p := Place{}
	if err := s.db.Sync(ctx).QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.ExternalPlaceID, &p.AppleAddress); err != nil {
		return nil, err
	}
	return &p, nil
}
