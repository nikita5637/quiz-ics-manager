// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// ICSGenerator is an autogenerated mock type for the ICSGenerator type
type ICSGenerator struct {
	mock.Mock
}

type ICSGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *ICSGenerator) EXPECT() *ICSGenerator_Expecter {
	return &ICSGenerator_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: summary, address, description, url, gameDateTime
func (_m *ICSGenerator) Generate(summary string, address string, description string, url string, gameDateTime time.Time) ([]byte, error) {
	ret := _m.Called(summary, address, description, url, gameDateTime)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, string, string, time.Time) []byte); ok {
		r0 = rf(summary, address, description, url, gameDateTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, time.Time) error); ok {
		r1 = rf(summary, address, description, url, gameDateTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICSGenerator_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type ICSGenerator_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//  - summary string
//  - address string
//  - description string
//  - url string
//  - gameDateTime time.Time
func (_e *ICSGenerator_Expecter) Generate(summary interface{}, address interface{}, description interface{}, url interface{}, gameDateTime interface{}) *ICSGenerator_Generate_Call {
	return &ICSGenerator_Generate_Call{Call: _e.mock.On("Generate", summary, address, description, url, gameDateTime)}
}

func (_c *ICSGenerator_Generate_Call) Run(run func(summary string, address string, description string, url string, gameDateTime time.Time)) *ICSGenerator_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(time.Time))
	})
	return _c
}

func (_c *ICSGenerator_Generate_Call) Return(_a0 []byte, _a1 error) *ICSGenerator_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewICSGenerator interface {
	mock.TestingT
	Cleanup(func())
}

// NewICSGenerator creates a new instance of ICSGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICSGenerator(t mockConstructorTestingTNewICSGenerator) *ICSGenerator {
	mock := &ICSGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
